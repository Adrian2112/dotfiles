nmap <leader>z :NERDTreeFind<cr>
nmap <leader>b :BuffergatorToggle<cr>

set hidden

:noremap <silent> <c-l> :nohls<cr><c-l>

nmap <space> zz
nmap N Nzz
nmap n nzz

let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}

" autocmd! BufNewFile,BufReadPre,FileReadPre *.rb so ~/.janus/ruby/ruby.vim
" autocmd! BufNewFile,BufReadPre,FileReadPre *.erb so ~/.janus/ruby/ruby.vim

autocmd FileType scheme colorscheme default

set wrap
set linebreak
set nolist  " list disables linebreak
set relativenumber

set cursorline

set guioptions-=T
if &term =~ "xterm-256color"
  colorscheme wombat256
  set mouse=a
else
  colorscheme railscasts2
endif 

set vb

set clipboard=unnamed
set nofoldenable

set guioptions=

au BufRead,BufNewFile *.pde,*.ino set filetype=c

hi LineNr guibg=#2B2B2B

au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino

set autoindent

nnoremap <leader>. :Tags<cr>

let g:gitgutter_realtime = 0

nnoremap <C-p> :Files<Cr>

" use silver_searcher instead of Ack for search
"let g:ackprg = 'ag --nogroup --nocolor --column'

" use ag for ctrl-p indexing
"let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
"      \ --ignore .git
"      \ --ignore .svn
"      \ --ignore .hg
"      \ --ignore .DS_Store
"      \ --ignore "**/*.pyc"
"      \ -g ""'

"let g:ctrlp_map='<c-p>'
"let g:ctrlp_cmd = 'call CallCtrlP()'

"func! CallCtrlP()
"    if exists('s:called_ctrlp')
"        CtrlPLastMode
"    else
"        let s:called_ctrlp = 1
"        CtrlPMRU
"    endif
"endfunc

" bind K to grep word under cursor
nnoremap FF :Ack "\b<C-R><C-W>\b"<CR>

" bind gb to :Git blame
nnoremap gb :Git blame<CR>

" change ctrl-w ctrl-o (:only) to ctrl-w o so we use zoomwin
map <C-w><C-o> <C-w>o

" remove FocusGained for nerd tree
" http://stackoverflow.com/questions/27347931/disable-root-node-refresh-on-window-focus
autocmd! AuNERDTreeCmd FocusGained

" show cmd being entered
set showcmd

map <leader>nn :NERDTreeToggle<CR>

" load last session
let g:session_autoload = 'yes'
let g:session_autosave = 'no'

"let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:slime_target = "tmux"

" open current file in new tab
nnoremap <silent> <C-w>t :tab split<CR>

let g:indent_guides_enable_on_vim_startup = 1

map <leader>r :Rails<CR>
map <leader>R :.Rails<CR>
map <C-c> :Econtroller 
map <C-f> :Efixture 
map <C-k> :Emodel 

command CpFileName !echo % | pbcopy

""" remove autocomplete from include files
set complete-=i

""" repairpal
highlight ColorColumn ctermbg=magenta guibg=#9b9b9b
call matchadd('ColorColumn', '\%121v', 100)

""" disabled Ex mode (the one that asks for visual to exit)
:nnoremap Q <Nop>

""" vim-dispatch handlers for asyn jobs
let g:dispatch_handlers = ['iterm', 'job']

""" remove fullscreen touchbar item for macvim
let g:macvim_default_touchbar_fullscreen=0

""" automaticallt reload file if it changes outside of vim
set autoread

""" https://github.com/craigemery/vim-autotag#macos-python-38-and-spawn
let g:autotagStartMethod='fork'

set guifont=Menlo-Regular:h15

""" https://github.com/preservim/nerdtree/issues/1321
""" bug where bottom panel stays big
let g:NERDTreeMinimalMenu=1

imap <C-\> <Plug>(copilot-next)

let g:rails_projections = {
      \ "spec/factories/*.rb": {
      \   "command": "factory",
      \   "affinity": "collection",
      \   "alternate": ["app/models/{singular}.rb", "app/models/{singular}.rb"],
      \   "related": "db/schema.rb#{}",
      \   "test": "spec/models/{singular}_test.rb",
      \   "template": "FactoryBot.define do\n  factory :{singular} do\n  end\nend",
      \   "keywords": "factory sequence"
      \ },
      \ "app/models/*.rb": {
      \   "related": ["spec/factories/{singular}.rb", "spec/factories/{underscore|singular}.rb"],
      \ }
      \}

command Especc :execute "Espec " . eval('substitute(expand("%:r"), "app/", "", "g")') . "!"
command Efactoryc :execute "Efactory " . eval('substitute(substitute(expand("%:r"), ".*app/models/", "", "g"), "/", "_", "g")') . "!"

imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

imap <Tab> <Plug>snipMateNextOrTrigger

function! SplitComma()
  execute a:firstline . ',' . a:lastline . 's/\(,\|(\)/\1\r/g'
  s/)/\r)/g
  execute 'normal! =%'
endfunction
command! -range SplitComma <line1>,<line2> call SplitComma()

let g:ruby_indet_assignment_style = "variable"
"""    x = if condition
"""      something
"""    end
let g:ruby_indent_hanging_elements = 0

let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_options_as_arguments = 1
let g:splitjoin_ruby_hanging_args = 0

""" go to beginning of line on command mode
cnoremap <C-a> <C-b>
